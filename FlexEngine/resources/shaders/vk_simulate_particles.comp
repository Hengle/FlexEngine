#version 450

#define PI_DIV_TWO 1.57079632679489661923132169163975144

layout (binding = 0) uniform UBODynamic
{
	vec4 colour0;
	vec4 colour1;
	float dt;
	float speed;
	uint particleCount;
} uboDynamic;

struct Particle
{
	float data[14];
	/*
	vec3 pos;
	vec3 vel;
	vec4 col;
	vec4 extraVec4;
	*/
};

layout (binding = 1) buffer ParticleBuffer
{
	Particle particles[];
};

layout (local_size_x = 256) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= uboDynamic.particleCount)
	{
		return;
	}

	vec3 pos = vec3(particles[index].data[0], particles[index].data[1], particles[index].data[2]);
	vec3 vel = vec3(particles[index].data[3], particles[index].data[4], particles[index].data[5]);
	vec4 col = vec4(particles[index].data[6], particles[index].data[7], particles[index].data[8], particles[index].data[9]);

	float mag = pow(length(pos.xz), 0.9);
	float dz = pos.z * 2.0;
	float dx = pos.x * 2.0;
	float theta = atan(dz, dx) - PI_DIV_TWO;

	vec3 perpVec = vec3(cos(theta), 0, sin(theta));
	vel += perpVec * uboDynamic.speed * (mag + sin(pos.y*0.2));
	float velMag = length(perpVec);
	vel *= 0.4;

	pos += vel * uboDynamic.dt;

	col = mix(uboDynamic.colour0, uboDynamic.colour1, clamp(pow(length(vel)*0.03, 5.0), 0, 1));

	particles[index].data[0] = pos[0];
	particles[index].data[1] = pos[1];
	particles[index].data[2] = pos[2];
	particles[index].data[3] = vel[0];
	particles[index].data[4] = vel[1];
	particles[index].data[5] = vel[2];
	particles[index].data[6] = col[0];
	particles[index].data[7] = col[1];
	particles[index].data[8] = col[2];
	particles[index].data[9] = col[3];
	particles[index].data[10] = mix(5.0, 4.0, clamp(mag, 0, 1)); // Size
}
