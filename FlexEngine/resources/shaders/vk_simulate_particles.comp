#version 450

#define PI_DIV_TWO 1.57079632679489661923132169163975144

layout (binding = 0) uniform UBODynamic
{
	vec4 colour0;
	vec4 colour1;
	float dt;
	uint particleCount;
} uboDynamic;

struct Particle
{
	float data[14];
	/*
	vec3 pos;
	vec3 vel;
	vec4 col;
	float lifetime;
	float initial_lifetime;
	vec2 unused;
	*/
};

layout (binding = 1) buffer ParticleBuffer
{
	Particle particles[];
};

layout (local_size_x = 256) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= uboDynamic.particleCount)
	{
		return;
	}

	vec3 pos = vec3(particles[index].data[0], particles[index].data[1], particles[index].data[2]);
	vec3 vel = vec3(particles[index].data[3], particles[index].data[4], particles[index].data[5]);
	vec4 col = vec4(particles[index].data[6], particles[index].data[7], particles[index].data[8], particles[index].data[9]);
	float lifetime = particles[index].data[10];
	float initial_lifetime = particles[index].data[11];

	if (lifetime <= 0.0) return;

	pos += vel * uboDynamic.dt;
	float alpha = clamp(lifetime / initial_lifetime, 0.0, 1.0);
	lifetime -= uboDynamic.dt;
	if (lifetime <= 0.0) alpha = 0.0;
	col.rgb = mix(uboDynamic.colour0.rgb, uboDynamic.colour1.rgb, alpha);
	col.a = alpha;
	vel.y -= uboDynamic.dt * 0.2;
	vel *= 1.0 - uboDynamic.dt * 0.1;

	particles[index].data[0] = pos[0];
	particles[index].data[1] = pos[1];
	particles[index].data[2] = pos[2];
	particles[index].data[3] = vel[0];
	particles[index].data[4] = vel[1];
	particles[index].data[5] = vel[2];
	particles[index].data[6] = col[0];
	particles[index].data[7] = col[1];
	particles[index].data[8] = col[2];
	particles[index].data[9] = col[3];
	particles[index].data[10] = lifetime;
}
