#version 450

#include "vk_particles_common.glsl"

layout (binding = 0) uniform UBOConstant
{
	vec4 time;
} uboConstant;

layout (binding = 1) uniform UBODynamic
{
	ParticleSimData particleSimData;
} uboDynamic;

layout (binding = 2) buffer ParticleBuffer
{
	Particle particles[];
};

layout (local_size_x = 256) in;

void Write(uint emitterIndex, vec3 pos, vec3 vel, vec4 col, float lifetime)
{
	particles[emitterIndex].data[0] = pos[0];
	particles[emitterIndex].data[1] = pos[1];
	particles[emitterIndex].data[2] = pos[2];
	particles[emitterIndex].data[3] = vel[0];
	particles[emitterIndex].data[4] = vel[1];
	particles[emitterIndex].data[5] = vel[2];
	particles[emitterIndex].data[6] = col[0];
	particles[emitterIndex].data[7] = col[1];
	particles[emitterIndex].data[8] = col[2];
	particles[emitterIndex].data[9] = col[3];
	particles[emitterIndex].data[10] = lifetime;
}

float RandomFloat(float minValue, float maxValue, int seedOffset)
{
	float seed = float(uboConstant.time.x + gl_GlobalInvocationID.x + uboDynamic.particleSimData.bufferOffset + seedOffset);
    float r = fract(seed * 17.0 * fract(seed * 0.3183099));
    return minValue + r * (maxValue - minValue);
}

float SampleFloat(Param param)
{
	switch (param.sampleType)
	{
		case SAMPLE_TYPE_CONSTANT:
			return param.valueMin.x;
		case SAMPLE_TYPE_RANDOM:
			return RandomFloat(param.valueMin[0], param.valueMax[0], 0);
	}
	return 0.0;
}

vec2 SampleVec2(Param param)
{
	switch (param.sampleType)
	{
		case SAMPLE_TYPE_CONSTANT:
			return param.valueMin.xy;
		case SAMPLE_TYPE_RANDOM:
			return vec2(
				RandomFloat(param.valueMin[0], param.valueMax[0], 0),
				RandomFloat(param.valueMin[1], param.valueMax[1], 1));
	}
	return vec2(0, 0);
}

vec3 SampleVec3(Param param)
{
	switch (param.sampleType)
	{
		case SAMPLE_TYPE_CONSTANT:
			return param.valueMin.xyz;
		case SAMPLE_TYPE_RANDOM:
			return vec3(
				RandomFloat(param.valueMin[0], param.valueMax[0], 0),
				RandomFloat(param.valueMin[1], param.valueMax[1], 1),
				RandomFloat(param.valueMin[2], param.valueMax[2], 2));
	}
	return vec3(0, 0, 0);
}

vec4 SampleVec4(Param param)
{
	switch (param.sampleType)
	{
		case SAMPLE_TYPE_CONSTANT:
			return param.valueMin;
		case SAMPLE_TYPE_RANDOM:
			return vec4(
				RandomFloat(param.valueMin[0], param.valueMax[0], 0),
				RandomFloat(param.valueMin[1], param.valueMax[1], 1),
				RandomFloat(param.valueMin[2], param.valueMax[2], 2),
				RandomFloat(param.valueMin[3], param.valueMax[3], 3));
	}
	return vec4(0, 0, 0, 0);
}

void Spawn(uint emitterIndex)
{
	// Params: (alphabetized)
	// 0: acceleration
	// 1: enable respawning
	// 2: fade over lifetime
	// 3: initial colour
	// 4: initial pos
	// 5: initial velocity
	// 6: lifetime
	// 7: particle count

	float lifetime = SampleFloat(uboDynamic.particleSimData.spawnParams[6]);
	vec3 pos = SampleVec3(uboDynamic.particleSimData.spawnParams[4]);
	vec3 vel = SampleVec3(uboDynamic.particleSimData.spawnParams[5]);
	vec4 col = SampleVec4(uboDynamic.particleSimData.spawnParams[3]);

	Write(emitterIndex, pos, vel, col, lifetime);
}

void main()
{
	uint index = gl_GlobalInvocationID.x + uboDynamic.particleSimData.bufferOffset;
	if (index >= uboDynamic.particleSimData.particleCount)
	{
		return;
	}

	float lifetime = particles[index].data[10];

	if (lifetime <= 0.0) 
	{
		if (uboDynamic.particleSimData.enableSpawning == 0)
		{
			return;
		}

		Spawn(index);
		lifetime = particles[index].data[10];
	}

	vec3 acceleration = SampleVec3(uboDynamic.particleSimData.spawnParams[0]);

	vec3 pos = vec3(particles[index].data[0], particles[index].data[1], particles[index].data[2]);
	vec3 vel = vec3(particles[index].data[3], particles[index].data[4], particles[index].data[5]);
	vec4 col = vec4(particles[index].data[6], particles[index].data[7], particles[index].data[8], particles[index].data[9]);
	float initial_lifetime = particles[index].data[11];

	float dt = uboDynamic.particleSimData.dt;

	pos += vel * dt;
	float alpha = clamp(lifetime / initial_lifetime, 0.0, 1.0);
	lifetime -= dt;
	if (lifetime <= 0.0) 
	{
		lifetime = 0.0;
		alpha = 0.0;
	}
	col.a = alpha;
	vel.y -= dt * 0.2;
	vel += (1.0 - dt) * acceleration;

	Write(index, pos, vel, col, lifetime);
}
