<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="flex::GUID">
    <DisplayString>{Data1} {Data2}</DisplayString>
  </Type>

  <Type Name="flex::Uniform">
    <DisplayString>{DBG_name,na}, id: {id} (size: {size})</DisplayString>
  </Type>

  <Type Name="flex::BaseScene">
    <DisplayString>{m_FileName}</DisplayString>
  </Type>

  <Type Name="flex::GameObject">
    <DisplayString>{m_Name}, ID: {ID}</DisplayString>
  </Type>

  <Type Name="flex::JSONObject">
    <!-- Ugly as heck but it works -->
    <DisplayString Condition="fields._Mypair._Myval2._Myfirst != fields._Mypair._Myval2._Mylast">{fields[0]} {{size = {fields._Mypair._Myval2._Mylast - fields._Mypair._Myval2._Myfirst} }}</DisplayString>
    <DisplayString Condition="fields._Mypair._Myval2._Myfirst == fields._Mypair._Myval2._Mylast">Empty {{size = {fields._Mypair._Myval2._Mylast - fields._Mypair._Myval2._Myfirst} }}</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>fields._Mypair._Myval2._Mylast - fields._Mypair._Myval2._Myfirst</Size>
        <ValuePointer>fields._Mypair._Myval2._Myfirst</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="flex::JSONField">
    <DisplayString>{label}, {value}</DisplayString>
  </Type>

  <Type Name="flex::JSONValue">
    <DisplayString Condition="type == flex::ValueType::STRING">{strValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::INT">{intValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::UINT">{uintValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::LONG">{longValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::ULONG">{ulongValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::FLOAT">{floatValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::BOOL">{uintValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::VEC2">{vecValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::VEC3">{vecValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::VEC4">{vecValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::QUAT">{vecValue}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::OBJECT">{objectValue}</DisplayString>
    <!--<DisplayString Condition="type == flex::ValueType::OBJECT_ARRAY">{obj}</DisplayString>
    <Expand>
      <Item Name="obj">objectArrayValue</Item>
    </Expand>-->
    <!--<DisplayString Condition="type == flex::ValueType::FIELD_ARRAY">{field}</DisplayString>
    <Expand>
      <Item Name="field">fieldArrayValue</Item>
    </Expand>-->
    <DisplayString Condition="type == flex::ValueType::UNINITIALIZED">uninitialized</DisplayString>
  </Type>

  <Type Name="flex::Value">
    <DisplayString Condition="type == flex::ValueType::OPERATION">{val.operation}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::INT_RAW">{val.intRaw}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::FLOAT_RAW">{val.floatRaw}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::BOOL_RAW">{val.boolRaw}</DisplayString>
    <DisplayString Condition="type == flex::ValueType::IDENTIFIER">{val.identifierValue}</DisplayString>
  </Type>

  <Type Name="flex::vk::VDeleter&lt;*&gt;">
    <DisplayString>{object} (VDeleter)</DisplayString>
  </Type>

  <Type Name="flex::Material">
    <DisplayString>{name}, shaderID: {shaderID}</DisplayString>
  </Type>

  <Type Name="flex::Shader">
    <DisplayString>{name}</DisplayString>
  </Type>

  <Type Name="flex::vk::VulkanRenderObject">
    <DisplayString>{gameObject->m_Name}, mat ID = {materialID}, {topology}</DisplayString>
  </Type>

  <Type Name="flex::SourceIter">
    <DisplayString Condition="index &lt; source.size() - 1">{lineNumber}:{columnIndex} ({index}) - {source[index]} (peek: {(char)source[index + 1]})</DisplayString>
    <DisplayString Condition="index == source.size() - 1">  {lineNumber}:{columnIndex} ({index}) - {source[index]}</DisplayString>
  </Type>

  <Type Name="flex::Span">
    <DisplayString>{low}:{high} (len {high-low})</DisplayString>
  </Type>

  <Type Name="flex::StringBuilder">
    <DisplayString>{(const char*)&amp;(buffer[0])} (len {length}, cap {buffer.size()})</DisplayString>
  </Type>

  <Type Name="flex::IR::Value">
    <DisplayString Condition="type == flex::IR::Value::Type::INT">{valInt}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::FLOAT">{valFloat}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::BOOL">{valBool}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::STRING">{valStr}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::CHAR">{valChar}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::_NONE">none</DisplayString>
  </Type>

  <Type Name="flex::VM::Value">
    <DisplayString Condition="type == flex::IR::Value::Type::INT">{valInt}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::FLOAT">{valFloat}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::BOOL">{valBool}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::STRING">{valStr}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::CHAR">{valChar}</DisplayString>
    <DisplayString Condition="type == flex::IR::Value::Type::_NONE">none</DisplayString>
  </Type>

  <Type Name="flex::Declaration">
    <DisplayString>{identifierStr,sb} = {initializer,na}</DisplayString>
  </Type>

  <Type Name="flex::StatementBlock">
    <DisplayString>{statements,na}</DisplayString>
  </Type>

  <Type Name="flex::IfStatement">
    <DisplayString>if ({condition,na}) \{{then,na}\} else {otherwise,na}</DisplayString>
  </Type>

  <Type Name="flex::ForStatement">
    <DisplayString>for ({setup,na};{condition,na};{update,na})</DisplayString>
  </Type>

  <Type Name="flex::WhileStatement">
    <DisplayString>while ({condition,na})</DisplayString>
  </Type>

  <Type Name="flex::DoWhileStatement">
    <DisplayString>do while ({condition,na})</DisplayString>
  </Type>

  <Type Name="flex::FunctionDeclaration">
    <DisplayString>func {name,sb}({arguments,na}) -> {returnType,en}</DisplayString>
  </Type>

  <Type Name="flex::BreakStatement">
    <DisplayString>break</DisplayString>
  </Type>

  <Type Name="flex::YieldStatement">
    <DisplayString>yield {yieldValue,na}</DisplayString>
  </Type>

  <Type Name="flex::ReturnStatement">
    <DisplayString>return {returnValue,na}</DisplayString>
  </Type>

  <Type Name="flex::Identifier">
    <DisplayString>{identifierStr,sb}</DisplayString>
  </Type>

  <Type Name="flex::Assignment">
    <DisplayString>{lhs,sb} = {rhs,na}</DisplayString>
  </Type>

  <Type Name="flex::CompoundAssignment">
    <DisplayString>{lhs,sb} {operatorType,en} {rhs,na}</DisplayString>
  </Type>

  <Type Name="flex::IntLiteral">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="flex::FloatLiteral">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="flex::BoolLiteral">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="flex::StringLiteral">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="flex::CharLiteral">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="flex::ListInitializer">
    <DisplayString>{listValues}</DisplayString>
  </Type>

  <Type Name="flex::IndexOperation">
    <DisplayString>{container}[{indexExpression,na}]</DisplayString>
  </Type>

  <Type Name="flex::UnaryOperation">
    <DisplayString>{expression,na} {operatorType,en}</DisplayString>
  </Type>

  <Type Name="flex::BinaryOperation">
    <DisplayString>({lhs,na} {operatorType,en} {rhs,na})</DisplayString>
  </Type>

  <Type Name="flex::TernaryOperation">
    <DisplayString>{condition,na} ? {ifTrue,na} : {ifFalse,na}</DisplayString>
  </Type>

  <Type Name="flex::FunctionCall">
    <DisplayString>{target}({arguments,na})</DisplayString>
  </Type>

</AutoVisualizer>